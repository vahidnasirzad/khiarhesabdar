{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 61, "column": 0}, "map": {"version":3,"sources":["file:///Users/vahidnasirzad/my-accounting-app/lib/prisma.ts"],"sourcesContent":["// lib/prisma.ts\n\nimport { PrismaClient } from '@prisma/client';\n\nconst globalForPrisma = global as unknown as {\n  prisma: PrismaClient | undefined;\n};\n\n// 1. Initialize the client using the global pattern\nconst prisma = globalForPrisma.prisma ?? new PrismaClient();\n\nif (process.env.NODE_ENV !== 'production') {\n  globalForPrisma.prisma = prisma;\n}\n\n// 2. Export the instance as the DEFAULT export\nexport default prisma; // ðŸ‘ˆ FIX IS HERE"],"names":[],"mappings":"AAAA,gBAAgB;;;;;AAEhB;;AAEA,MAAM;AAIN,oDAAoD;AACpD,MAAM,SAAS,gBAAgB,MAAM,IAAI,IAAI,6IAAY;AAEzD,wCAA2C;IACzC,gBAAgB,MAAM,GAAG;AAC3B;uCAGe;CAAQ,iBAAiB","debugId":null}},
    {"offset": {"line": 80, "column": 0}, "map": {"version":3,"sources":["file:///Users/vahidnasirzad/my-accounting-app/app/api/invoices/route.js"],"sourcesContent":["// app/api/invoices/route.js\n\nimport { NextResponse } from 'next/server';\nimport  prisma  from '../../../lib/prisma'; // ðŸš¨ Ensure this path is correct for your project structure\n\n/**\n * Handles POST requests to /api/invoices.\n * Inserts a new invoice record into the Neon database via Prisma.\n * @param {Request} request - The incoming Next.js request object\n * @returns {NextResponse}\n */\nexport async function POST(request) {\n  try {\n    // 1. Parse the request body\n    const data = await request.json();\n    \n    // 2. Destructure and validate required fields\n    const { \n      date, \n      title, \n      description = '', \n      amount, \n      store_name = '', \n      type, \n      category = 'General', \n      has_receipt = false, \n      has_invoice = false,\n    } = data;\n\n    // Basic validation check\n    if (!title || !amount || !type) {\n        return NextResponse.json({ message: 'Missing required fields: title, amount, and type are mandatory.' }, { status: 400 });\n    }\n\n    // 3. Prepare data for Prisma\n    const numericAmount = parseFloat(amount);\n    \n    // Validate amount conversion\n    if (isNaN(numericAmount)) {\n        return NextResponse.json({ message: 'Amount must be a valid number.' }, { status: 400 });\n    }\n    \n    // 4. Execute the INSERT query using Prisma\n    const newInvoice = await prisma.invoice.create({\n        data: {\n            // Convert date string (YYYY-MM-DD) back to a Date object for the database\n            date: date ? new Date(date) : null, \n            title,\n            description,\n            amount: numericAmount, // Saved as a numeric type (e.g., Decimal/Float)\n            store_name,\n            type,\n            category,\n            has_receipt,\n            has_invoice,\n        }\n    });\n\n    // 5. Return success response\n    return NextResponse.json({ \n        message: 'Invoice added successfully.', \n        invoice: newInvoice \n    }, { status: 201 });\n\n  } catch (error) {\n    // 6. Log and return error response\n    console.error('Prisma Database Error (POST /api/invoices):', error);\n    return NextResponse.json({ message: 'Failed to save invoice to the database.' }, { status: 500 });\n  }\n}\n\n// NOTE: We do not include a GET function here because the initial data fetch is \n// handled directly by the Server Component (app/invoices/page.js) using Prisma for better performance."],"names":[],"mappings":"AAAA,4BAA4B;;;;;AAE5B;AACA,mMAA4C,4DAA4D;;;AAQjG,eAAe,KAAK,OAAO;IAChC,IAAI;QACF,4BAA4B;QAC5B,MAAM,OAAO,MAAM,QAAQ,IAAI;QAE/B,8CAA8C;QAC9C,MAAM,EACJ,IAAI,EACJ,KAAK,EACL,cAAc,EAAE,EAChB,MAAM,EACN,aAAa,EAAE,EACf,IAAI,EACJ,WAAW,SAAS,EACpB,cAAc,KAAK,EACnB,cAAc,KAAK,EACpB,GAAG;QAEJ,yBAAyB;QACzB,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,MAAM;YAC5B,OAAO,gJAAY,CAAC,IAAI,CAAC;gBAAE,SAAS;YAAkE,GAAG;gBAAE,QAAQ;YAAI;QAC3H;QAEA,6BAA6B;QAC7B,MAAM,gBAAgB,WAAW;QAEjC,6BAA6B;QAC7B,IAAI,MAAM,gBAAgB;YACtB,OAAO,gJAAY,CAAC,IAAI,CAAC;gBAAE,SAAS;YAAiC,GAAG;gBAAE,QAAQ;YAAI;QAC1F;QAEA,2CAA2C;QAC3C,MAAM,aAAa,MAAM,0HAAM,CAAC,OAAO,CAAC,MAAM,CAAC;YAC3C,MAAM;gBACF,0EAA0E;gBAC1E,MAAM,OAAO,IAAI,KAAK,QAAQ;gBAC9B;gBACA;gBACA,QAAQ;gBACR;gBACA;gBACA;gBACA;gBACA;YACJ;QACJ;QAEA,6BAA6B;QAC7B,OAAO,gJAAY,CAAC,IAAI,CAAC;YACrB,SAAS;YACT,SAAS;QACb,GAAG;YAAE,QAAQ;QAAI;IAEnB,EAAE,OAAO,OAAO;QACd,mCAAmC;QACnC,QAAQ,KAAK,CAAC,+CAA+C;QAC7D,OAAO,gJAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAA0C,GAAG;YAAE,QAAQ;QAAI;IACjG;AACF,EAEA,iFAAiF;CACjF,uGAAuG","debugId":null}}]
}